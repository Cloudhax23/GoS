{
	"scope": "source.lua - variable.other.lua",

	"completions":
	[

		"GOS_DIR",
		"SCRIPT_PATH", 
		"COMMON_PATH", 
		"SPRITE_PATH", 
		"SOUNDS_PATH", 
		
		"LoadGOSScript(string)", 
		"MD5Encode(string)", 
		"Base64Encode(string)", 
		"Base64Decode(string)",
		
		"PrintChat('text')",
		"MessageBox(0,'text',0)",
		"KeyIsDown(key)",
		"GetObjectType(Obj)",
		"IsObjectAlive(Obj)",
		"GetObjectName(Obj)",
		"GetObjectBaseName(Obj)",
		"IsDead(Obj)",
		"IsTargetable(Obj)",
		"GetNetworkID(Obj)",
		"GetTeam(Obj)",
		"GetOrigin(Obj)",
		"GetRange(Obj)",
		"GetHitBox(Obj)",
		"GetLevel(Obj)",
		"GetExperience(Obj)",
		"IsVisible(Obj)",
		"GetMoveSpeed(Obj)",
		"GetCurrentHP(Obj)",
		"GetMaxHP(Obj)",
		"GetCurrentMana(Obj)",
		"GetMaxMana(Obj)",
		"GetDmgShield(Obj)",
		"GetMagicShield(Obj)",
		"IsCampusUp(mob)",
		"GetCDR(Obj)",
		"GetArmorPenFlat(Obj)",
		"GetMagicPenFlat(Obj)",
		"GetArmorPenPercent(Obj)",
		"GetMagicPenPercent(Obj)",
		"GetBaseDamage(Obj)",
		"GetBonusDmg(Obj)",
		"GetBonusAP(Obj)",
		"GetLifeSteal(Obj)",
		"GetSpellVamp(Obj)",
		"GetAttackSpeed(Obj)",
		"GetBaseAttackSpeed(Obj)",
		"GetWindUp(Obj)",
		"GetCritChance(Obj)",
		"GetArmor(Obj)",
		"GetBaseArmor(Obj)",
		"GetMagicResist(Obj)",
		"GetHPRegen(Obj)",
		"GetManaRegen(Obj)",
		"GotBuff(Obj, buffname)",
		"GetBuffCount(Obj, index)",
		"GetBuffName(unit, index)",
		"GetItemSlot(Obj, itemID)",
		"GetCastLevel(Obj, Spell)",
		"GetCastRange(Obj, Spell)",
		"GetCastMana(Obj, Spell, Level)",
		"GetCastCooldown(Obj, Spell Level)",
		"GetCastName(Obj, Spell)", 
		"IsImmune(target, unit)",
		"GetLatency()",
		"GetFPS()",
		"GetTickCount()",
		"CastTargetSpell(target, spell)",
		"CastSpell(spell)",
		"CastSkillShot(spell, pos)",
		"CastSkillShot(spell, pos.x, pos.y, pos.z)",
		"CastSkillShot2(spell, pos)",
		"CastSkillShot2(spell, pos.x, pos.y, pos.z)",
		"CastSkillShot3(spell, startpos, endpos)",
		"LevelSpell(spell)",
		"MoveToXYZ(x,y,z)",
		"HoldPosition()",
		"AttackUnit(Obj)",
		"BuyItem(ID)",
		"DrawCircle(x,y,z,radius,width,quality,color)",
		"WorldToScreen(visfix,x,y,z)",
		"WorldToMinimap(pos)",
		"DrawText(text,size,x,y,color)",
		"DrawTextSmall(text,x,y,color)",
		"FillRect(x,y,width,height,color)",
		"DrawDmgOverHpBar(Obj,currenthp,adandtruedmg,apdmg,color)",
		"GetMousePos()",
		"GetCurrentTarget()",
		"GetPredictionForPlayer(StartPos,target,movespeed,speed,delay,range,width,collision,AddHitBox)",
		"ARGB(Opacity,Red,Green,Blue)",
		"GetMapID()",
		"GetCursorPos()",
		"GetResolution()",
		"DrawLine(x1,y1,x2,y2,width,color)",
		"DrawCircleMinimap(pos,radius,width,quality,color)",
		"GetItemID(Obj, slot)",
		"GetItemAmmo(Obj, slot)",
		"GetItemStack(Obj, slot)",
		"GetGameTimer()",
		"GetBuffData()",
		"GetBuffType(Obj, index)",
		"GetBuffStacks(Obj, index)",
		"GetBuffStartTime(Obj, index)",
		"GetBuffExpireTime(Obj, index)",
		"GetBuffTypeList(Obj, index)",
		"GetBuffTypeToString(int)",
		"IsChatOpened()",
		"IsGameOnTop()",
		"CastEmote(EmoteID)",
		"GetDamagePrediction(Obj, delta)",
		"CreateSpriteFromFile('yourspritefile.png', scaling)",
		"ReleaseSprite(spriteIndex)",
		"DrawSprite(SpriteIndex,x,y,SpriteX,SpriteY,width,height,color)",
		"GetObjectSpellName(Obj)",
		"GetObjectSpellOwner(Obj)",
		"GetObjectSpellStartPos(Obj)",
		"GetObjectSpellEndPos(Obj)",
		"HeroSkinChanger(Obj,skinID)", 
		"GetGameTarget()",
		"IsGoSHumanizerActive()",
		"ModelChanger(Obj,skinID,modelname)",
		"GetObjectModelName(Obj)",
		"GetLevelPoints(Obj)",
		"BlockInput(true/false)",
		"BlockOrder()",
		"BlockCast()",
		"GetUser()",
		"CreateDir(COMMON_PATH..'YourTestHere\\')",
		"RemoveDir(COMMON_PATH..'YourTestHere\\')",
		"DirExists(COMMON_PATH..'YourTestHere\\')",
		"DeleteFile('filename')",
		"PlaySound('filename')",
		"StopSound('filename')",
		"IsSubscriber(X,X)",
		"GetGroup()",
		"BlockF7OrbWalk(true/false)",
		"BlockF7Dodge(true/false)",
		"GetTextRect(text,size,x,y)",
		"Interact(Obj)",
		
		"_Q",
		"_W",
		"_E",
		"_R",
		
		"ITEM_1",
		"ITEM_2",
		"ITEM_3",
		"ITEM_4",
		"ITEM_5", 
		"ITEM_6", 
		"ITEM_7",
		
		"SUMMONER_1",
		"SUMMONER_2",
		
		"READY",
		"NOTAVAILABLE",
		"NOTLEARNED",
		"READYNONCAST",
		"UNKNOWN",
		"ONCOOLDOWN",
		
		"Obj_AI_SpawnPoint",
		"Obj_AI_Camp",
		"Obj_AI_Barracks",
		"Obj_AI_Hero",
		"Obj_AI_Minion",
		"Obj_AI_Turret",
		"Obj_AI_LineMissle",
		"Obj_AI_Shop",

		"CRYSTAL_SCAR",
		"TWISTED_TREELINE",
		"SUMMONERS_RIFT",
		"HOWLING_ABYSS",
		"RECALL",

		".name",
		".charName",
		".dead",
		".team",
		".valid",
		".visible",
		".level",
		".type",
		".pos",
		".pos2D",
		".x",
		".y",
		".z",
		".distance",
		".networkID",
		".isInvulnerable",
		".isMelee",
		".isRanged",
		".isMe",
		".isStealthed",
		".isTaunted",
		".isCharmed",
		".isFeared",
		".isAsleep",
		".isNearSight",
		".isGhosted",
		".isFleeing",
		".isPoisoned",
		".isSpellShielded",
		".isTargetable",
		".range",
		".boundingRadius",
		".cdr",
		".health",
		".maxHealth",
		".mana",
		".maxMana",
		".hpRegen",
		".mpRegen",
		".critChance",
		".attackSpeed",
		".baseAttackSpeed",
		".windUp",
		".exp",
		".lifeSteal",
		".spellVamp",
		".physReduction",
		".magicReduction",
		".armorPen",
		".magicPen",
		".armorPenPercent",
		".bonusArmorPenPercent",
		".magicPenPercent",
		".totalDamage",
		".ap",
		".damage",
		".armor",
		".baseArmor",
		".magicArmor",
		".ms",
		".gold",
		".shieldAD",
		".shieldAP",
		".is",
		".isHero",
		".isMinion",
		".isTurret",
		".totalGold",
		".hpBarPos",
		".isRecalling",
		".isSpell",
		".spellName",
		".spellOwner",
		".startPos",
		".endPos",
		".placePos",
		".target",
		".owner",
		
		":Stop()",
		":Move(x,z)",
		":Attack(targetUnit)",
		":CastSpell(slot)",
		":CastSpell(slot, targetUnit)", 
		":CastSpell(slot, x, z)", 
		":HasBuffType(buffType)",
		":CalcDamage(targetUnit, amount)",
		":CalcMagicDamage(targetUnit, amount)",
		":GetSpellData(slot)",
		":CanUseSpell(slot)",
		":GetBuff(index)",
		":getBuff(index)",
		":GetItem(slot)",
		":DistanceTo(object)",
		":DistanceTo(x, y, z)",
		":DistanceTo(x, z)",
		":Draw()",
		":Draw(radius)",
		":Draw(radius, color)",
		":DrawDmg(damage)",
		":DrawDmg(damage, color)",
		":DrawDmg(damage, color, currentHpOffset)",
		":Skin(id)",
		":Model(id, modelName)",
	]
}
